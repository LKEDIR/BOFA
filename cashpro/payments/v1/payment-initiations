
Parameters
Name 	
Description

Content-Type  *
Identifying the content of the payload as JSON.
ex. application/json

Authorization  *
A unique access token to be used for a single request.
ex. Bearer XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

X-Idempotency-Key  *
A unique identifier to be used for a single payment. Length: 1 - 256
ex. ABC123

pmt_intent_id  *
The intent ID generated with the /intents resource.
ex. 11111111-AAAA-AAAA-AAAA-111111111111

body  *
Payment Initiation Request Body

    Example value
    Model

{
  "paymentIdentification": {
    "instructionIdentification": "instrId123",
    "endToEndIdentification": "e2eId123"
  },
  "paymentMethod": "TRF",
  "requestedExecutionDate": "2018-01-13",
  "amount": {
    "value": "1.00",
    "type": "CREDIT"
  },
  "debtorAccount": {
    "identification": "601011111111",
    "schemeName": "BBAN",
    "currency": "string"
  },
  "debtorAgent": {
    "institution": {
      "name": "string",
      "identifiers": [
        {
          "identification": "BOFAFRPP",
          "schemeName": "BIC"
        }
      ]
    }
  },
  "creditor": {
    "name": "Beneficiary Name",
    "postalAddress": {
      "addressLine": [
        {
          "address": "Beneficiary Address Line 1"
        }
      ],
      "city": "Beneficiary City",
      "country": "GB"
    }
  },
  "creditorAccount": {
    "identification": "GB11BOFA11111111111111",
    "schemeName": "IBAN",
    "currency": "EUR"
  },
  "creditorAgent": {
    "institution": {
      "name": "string",
      "identifiers": [
        {
          "identification": "BOFAGB22XXX",
          "schemeName": "BIC"
        }
      ]
    }
  },
  "paymentType": {
    "serviceLevel": "URG"
  },
  "unstructuredRemittance": "Beneficiary unstructured addenda"
}

Parameter content type

# Model

paymentInitiationAPI {
paymentIdentification (paymentIdentification),
paymentMethod (string): The means of payment, static value "TRF",
requestedExecutionDate (string): Date on which payment should be made in YYYY-MM-DD format,
amount (amount): Amount of the transaction,
debtorAccount (debtorAccount): The account that will be debited to satisfy the payment,
debtorAgent (debtorAgent): The Financial Institution holding the debit account,
creditor (creditor): Party to which the payment will be made,
creditorAccount (creditorAccount): The account that will be credited to satisfy the payment,
creditorAgent (creditorAgent): The Financial Institution holding the credit account,
paymentType (paymentType): Indication of the type of payment being initiated,
unstructuredRemittance (string, optional): Unstructured information to be conveyed to the receiver. Length : 1 - 140
}
paymentIdentification {
instructionIdentification (string): Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Length : 1 - 35,
endToEndIdentification (string): Unique identification assigned by the initiating party to unumbiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.  Length : 1 - 35
}
amount {
value (string): Amount of the transaction represented as 9999999999.99. Length: 1 - 13,
type (string): Specifies whether the payment is a fixed debit (equivalent) or fixed credit (instructed) payment. enum: "CREDIT", "DEBIT"
}
debtorAccount {
identification (string): Account number or identification. Length : 1 - 34,
schemeName (string): Name of the identification scheme. enum: "IBAN", "BBAN",
currency (string, optional): Currency code of the account, as documented by ISO 4217 Codes for the representation of currencies and funds .
 Required for creditor account.
}
debtorAgent {
institution (institution, optional): The Financial Institution holding the debit account
}
institution {
name (string, optional): The name of the Financial Institution. Length : 1 - 35,
identifiers (Array[identifiers]): Name of the identification scheme enum: "IBAN", "BBAN"
}
identifiers {
identification (string): An alpha numeric value that can uniquely identify the Financial Institution based on a specific Scheme,
schemeName (string): Identification scheme within which the identifier is unique enum: "BIC", "UKSORT", "USABA"
}
creditor {
name (string): Name of the party. Length : 1 - 140 ,
postalAddress (postalAddress): Address of the party
}
postalAddress {
addressLine (Array[addressLine]): Address of the party Length : 1 - 70 Min: 1 Max: 2,
city (string): City of the party Length : 1 - 35,
country (string): ISO country code of the party Length : 2
}
addressLine {
address (string)
}
creditorAccount {
identification (string): Account number or identification. Length : 1 - 34,
schemeName (string): Name of the identification scheme. enum: "IBAN", "BBAN",
currency (string, optional): Currency code of the account, as documented by ISO 4217 Codes for the representation of currencies and funds .Required for creditor account.
}
creditorAgent {
institution (creditorinstitution, optional): The Financial Institution holding the debit account
}
creditorinstitution {
name (string, optional): The name of the Financial Institution. Length : 1 - 35,
identifiers (Array[creditoridentifiers]): Name of the identification scheme enum: "IBAN", "BBAN"
}
creditoridentifiers {
identification (string): An alpha numeric value that can uniquely identify the Financial Institution based on a specific Scheme,
schemeName (string): Identification scheme within which the identifier is unique enum: "BIC", "UKSORT", "USABA"
}
paymentType {
serviceLevel (string): Agreement under which or rules under which the transaction should be processed enum: "URG", "LOW", 
 Usage: "URG" indicates high value wire transaction. "LOW" indicates local low value transaction, e.g. SEPA.
}



Responses
Response content type
Code 	Description
200 	
Response successfully retrieved

    Example value
    Model

{
  "mid": "1234567890ABC",
  "paymentStatus": "PEND_APPROV"
}

400 	
Bad Request

    Example value
    Model

{
  "errors": [
    {
      "code": "CPS_API_016",
      "description": "INTENTID MISSING"
    }
  ]
}

401 	
Unauthorized
403 	
Forbidden
404 	
Not Found
405 	
Invalid method
500 	
Internal server error
503 	
Service unavailable
